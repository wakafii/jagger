// Options for JavaCC.
options { LOOKAHEAD=1; FORCE_LA_CHECK=true; }

// Fonction principale
PARSER_BEGIN(Jagger)
import java.util.Vector;
public class Jagger
{
    public static void main(String args[]) throws ParseException
    {
				if(args.length < 1)
				{       
					Jagger parser = new Jagger(System.in);
		      parser.mainloop();
				}
				else
				{
					String fichier = args[0];
					try{
						java.io.FileReader file = new java.io.FileReader(fichier);
						Jagger parser = new Jagger(file);
						parser.mainloop();
					}
					catch(Exception e){
					}
				}
    }
}
PARSER_END(Jagger)

// Characters to ignore.
SKIP: { " " | "\r" | "\t" }

// Token specifications.
TOKEN:
{
    < NUMBER: (<DIGIT>)+ ("." (<DIGIT>)*)? >  // A decimal number.
|   < DIGIT: ["0"-"9"] >                      // A decimal digit.
|   < STRING: "\"" ((~["\n","\r","\""])*)? "\"">
|   < CHAR: ["a"-"z","A"-"Z"]>
|		< KEYLET : "let">
|		< KEYIN : "in">
|		< KEYEND : "end">
|		< VAR : "var "(<CHAR>)+ ((<DIGIT>)* (<CHAR>)*)* >
|		< ERREUR : (~["\n","\r","\""])* >
|   < EOL: "\n" >                             // End of line.
}

// Main lopp: read expressions on a line until end of file.
//     mainloop â†’ (expression <EOL>)* <EOF>
void mainloop():
{ Exp a; }
{
    (
      a=let() <EOL> { System.out.println(new PPrinter(a)); System.out.println(new Evaluator(a)); }
		//| a=erreur() <EOL> { System.out.println("erreur");}
    )*
    <EOF>
}

Exp let():
{ Token t;Exp a,b;/* Vector<Exp> vecExp = new Vector<Exp>(); Vector<Var> vecVar = new Vector<Var>(); */}
{
	a=expressionComp()
	(
		<KEYLET>
		(
			t=<VAR> ":=" b=expressionComp()<EOL> { b = new Var(t.toString(),b); /*vecVar.add(b);*/ }
		)*
		<KEYIN>
		(
			b = let()<EOL> { /*vecExp.add(b);*/ }
		)*
		<KEYEND> /*{ a = new LetInEnd(vecVar, vecExp); }*/
	)? {/*vecVar.clear(); vecExp.clear(); */return a; }
}

Exp expressionComp():
{ Exp a,b; }
{
    a=expression()
    (
		  "<" b=expression() { a = new Inf(a,b); }
		| ">" b=expression() { a = new Sup(a,b); }
		| "=" b=expression() { a = new Equal(a,b); }
		| "<=" b=expression() { a = new InfEqual(a,b); }
		| ">=" b=expression() { a = new SupEqual(a,b); }
		)? { return a; }
}

// Expression (the axiom).
// E -> T ('+'T | '-'T)*
Exp expression():
{ Exp a,b; }
{
    a=term()
    (
      "+" b=expression() { a = new Add(a,b); }
    | "-" b=expression() { a = new Sub(a,b); }
    )? { return a; }
}

// Term.
// T -> F ('*'F | '/'F)*
Exp term():
{ Exp a,b; }
{
    a=factor()
    (
      "*" b=factor() { a = new Mult(a,b); }
    | "/" b=factor() { a = new Div(a,b); }
    )* { return a; }
}

// Factor of an expression.
// F -> <NUMBER> | "(" E ")"
Exp factor():
{ Token t; Exp e,a,b;}
{
      t=<NUMBER> { return new Num(Integer.parseInt(t.image)); }
		| t=<STRING> { return new ExpString(t.toString()); }
    | "(" e=expression() ")" { return e; }
		| "-" e=expression() { return new Neg(e);}
		| "print(" e=expression() ")" { return new Print(e);}
		| "if " e=expressionComp() " then " a=expression() " else " b=expression() { return new IfThenElse(e,a,b);}
		| t=<VAR> ":=" e=expressionComp() { return new Var(t.toString(), e);}
}

Exp erreur():
{ Token t; }
{
			t=<ERREUR> { return null; }
}
